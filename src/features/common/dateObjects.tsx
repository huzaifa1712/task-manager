// for functions/constants common to dealing with dates
import { format, parse } from 'date-fns';
import React from 'react';

// TODO: make fns independent of format string to enable re-use

// these formats are generated by default date and time picker from bootstrap/normal form-control
export const DATE_PICKER_FORMAT = "yyyy-MM-dd"; //e.g 2022-01-05
export const TIME_PICKER_FORMAT = "HH:mm" // e.g 21:06
const DEFAULT_TIME = "00:00"
const FORMAT_DATE = "eee, d MMM R"; // Wed, 30 Jan 2022
const FORMAT_TIME = "h:mmaaa"; // 6:30pm/am

// parse(inputStr, formatStr, referenceDate to fill in missing parts)
// assume both non-empty: this is for case date, time both provided
// input: date,time according to picker formats, output: JS Date Obj corresponding to this datetime
export const dateTimeInputsToDate =(date: string, time: string): Date => {
    const sep = "";
    return parse(`${date + sep + time}`,
     `${DATE_PICKER_FORMAT + sep + TIME_PICKER_FORMAT}`,
      new Date()
    )
};

// input: dateStr following DATE_PICKER_FORMAT
// output: Date object with that date and time set to 12am (stand in for "default time")
export const generate12AMDateFromDateStr = (dateStr:string):Date => {
   return dateTimeInputsToDate(dateStr, DEFAULT_TIME);
}

// input: date ISO string 
// output: dateStr according to DATE_PICKER_FORMAT
export const dateISOToDateStr = (dateISO:string):string => {
    return format(new Date(dateISO), DATE_PICKER_FORMAT);
}

// input: dateISO string
// output: timeStr according to TIME_PICKER_FORMAT
export const dateISOToTimeStr = (dateISO:string):string => {
  return format(new Date(dateISO), TIME_PICKER_FORMAT);
}

// input: date ISO string
// output: date display string according to FORMAT_DATE
export const dateISOToDateDisplay = (dateISO: string):string => {
    return format(new Date(dateISO), FORMAT_DATE);
}


// input: date ISO string
// output: time display string according to FORMAT_TIME
export const dateISOToTimeDisplay = (dateISO: string):string => {
    return format(new Date(dateISO), FORMAT_TIME);
}

// input: dateStr1, dateStr2 strings acc. dateFormatStr (indep. of date format)
// output: 
    // dateStr1 before dateStr2: -ve
    // same: 0
    // dateStr1 after dateStr2: +ve

const compareDateStr = (dateStr1:string, dateStr2: string, dateFormatStr:string):number => {
    const refDate = new Date();
    return parse(dateStr1, dateFormatStr, refDate).valueOf() - parse(dateStr2, dateFormatStr, refDate).valueOf();
}

// specific to FORMAT_DATE. To avoid having to import constant in other files; just import the fn (encapsulation)
export const compareDateDisplayStr = (dateStr1:string, dateStr2:string) => compareDateStr(dateStr1, dateStr2, FORMAT_DATE);

// easier to make another fn than to use above fn since native JS Date takes ISO str in constructor
export const compareDateISOStr = (date1:string, date2:string):number => {
    return new Date(date1).valueOf() - new Date(date2).valueOf();
}
// convert datetime string from DB to formatted display string for use in TaskCard
// assumes dateStr is a date ISO string e.g '2022-01-04T15:11:34.056Z'
export const DueDateStr = ({ dateStr }: { dateStr: string }) => {
  return (
      <>
          due <b>{dateISOToDateDisplay(dateStr)}</b> at <b>{dateISOToTimeDisplay(dateStr)}</b>
      </>
  );
}